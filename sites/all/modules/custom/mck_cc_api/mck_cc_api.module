<?php

/**
 * Implements hook_menu().
 */

function mck_cc_api_menu(){
    $items = array();

    $items['api/cc/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'mck_cc_api_callback',
        'page arguments' => array(2),
        'access callback' => TRUE,
    );

    $items['api/cc/form'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'api_cc_form',
        'access callback' => TRUE,
    );

    $items['admin/config/api/cc/settings'] = array(
        'title' => 'Charge Code API Settings',
        'description' => 'Administer settings for CC API.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cc_api_admin_form'),
        'access arguments' => array('access administration pages'),
        'file' => 'mck_cc_api.admin.inc',
        'file path' => drupal_get_path('module', 'mck_cc_api'),
    );



    return $items;
}

/**
 * Returns the theme for the popup
 *
 */

function api_cc_form(){
    return theme('api_cc_page');
}

/**
 * Implements hook_theme().
 */

function mck_cc_api_theme($existing, $type, $theme, $path){
    $body = variable_get('cc_api_popup_body');
    $footer = variable_get('cc_api_popup_footer');

    return array(
        'api_cc_page' => array(
            'variables' => array('popup_body' => $body, 'popup_footer' => $footer),
            'template' => 'mck-cc-api-popup',
            'path' => drupal_get_path('module', 'mck_cc_api') .'/templates/',
        )
    );
}

/**
 * Generate auth token
 * TODO: add ability to check if token has expired.
 */

function generate_token($regnerate = FALSE){
    if($regnerate == TRUE) {

        $url = "http://apioauth.mckinsey.com/asg/oauth2/access_token";
        $data = array("grant_type" => "client_credentials",
            "scope" => "public",
            "client_id" => variable_get("cc_api_secret"),
            "client_secret" => variable_get("cc_api_key"),
        );

        $options = array(
            'method' => 'POST',
            'data' => drupal_http_build_query($data),
            'timeout' => 15,
            'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
        );
        $response = drupal_http_request($url, $options);
        $datar = json_decode($response->data);
        $token = $datar->access_token;

        if (isset($token)) variable_set("cc_api_bearer_token", $token);

        return $token;
    }
}
/**
 * Page callback created for AJAX request
 */

function mck_cc_api_callback($cc){
    $ed_name = isset($_POST['ed_name']) ? $_POST['ed_name'] : "";
    $response = api_cc_request($cc);
    print $response;

    //save entered data to profile by current logged in user
    if($response == "true"){

        global $user;
        $user = user_load($user->uid);

        // Create the collection entity and set it's "host".
        $collection = entity_create('field_collection_item', array('field_name' => 'field_ccfc'));
        $collection->setHostEntity('user', $user);

        // Now define the collection parameters.
        $cwrapper = entity_metadata_wrapper('field_collection_item', $collection);
        $cwrapper->field_entered_charge_codes = $cc;
        $cwrapper->field_ed_name = $ed_name;
        $cwrapper->field_entered_time = date('m/d/Y h:m:s');
        $cwrapper->save();
    }

}

/**
 * API callback
 */

function api_cc_request($cc){
    $token = variable_get("cc_api_bearer_token");
    $token = isset($token) ? variable_get("cc_api_bearer_token") : generate_token(TRUE);

    $url = 'http://api.mckinsey.com/v1/charge_codes/'.$cc.'/validate';

    $options = [
        'method' => 'GET',
        'headers' => [
            'Authorization' => "Bearer " . $token
            ]
    ];

    $request = drupal_http_request($url, $options);
    $response = json_decode($request->data);
    return $response->chargeCode->valid;

}

/**
 * Implements hook_page_alter().
 *
 */

function mck_cc_api_page_alter(&$page){
    global $modalToggle, $isAdminpage, $adminPopup;
    $modalToggle = variable_get("cc_api_enable_popup");
    $isAdminpage = strpos(current_path(), 'admin');
    $adminPopup = variable_get('cc_api_enable_popup_admin');
    global $user;

    function run($modalToggle, &$page){
        $modalTitle = variable_get("cc_api_popup_title");
        $modalSubtitle = variable_get("cc_api_popup_subtitle");
        $siteFolder = variable_get("cc_api_path");
        

        drupal_add_js(drupal_get_path("module", "mck_cc_api") . "/js/iziModal/js/iziModal.js");
        drupal_add_css(drupal_get_path("module", "mck_cc_api") . "/js/iziModal/css/iziModal.css");
        drupal_add_js(array('mck_cc_api' => array('title' => $modalTitle, 'subtitle' => $modalSubtitle, 'toggle' => $modalToggle, 'sitefolder' => $siteFolder)), array('type' => 'setting'));


        drupal_add_js(drupal_get_path("module", "mck_cc_api") . "/js/mck_cc_api.js");
        $page['content']['system_main']['main']['#markup'] .= theme('api_cc_page');
    }

    if($modalToggle && $isAdminpage === FALSE) {
        if($user->uid == "1"){
            if($adminPopup == "1"){
                run($modalToggle, $page);
            }
        } else {
            run($modalToggle, $page);
        }
    }
}

/**
 * Implements hook_form().
 */

function mck_cc_api_form($form, &$form_state){

    $form = array();

    $form['charge_code_ed_name'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'placeholder' => 'ED Name (Optional)',
        ),
    );

    $form['charge_code'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'placeholder' => 'Enter Charge Code (Mandatory for tracking purpose only)',
        ),
    );

    $form['superfooter'] =  array(
        '#prefix' => '<div class="popup-superfooter">',
        '#suffix' => '</div>',
        '#markup' => variable_get('cc_api_popup_superfooter', ''),
    );

    $form['charge_code_submit'] = array(
        '#type' => 'button',
        '#value' => 'Validate',
        '#ajax' => array(
            'callback' => 'validate_cc',
            'wrapper' => '#popup-izimodal .result',
            'effect' => 'fade',
        ),
        '#suffix' => '<div class="spinner">
                      <div class="rect1"></div>
                      <div class="rect2"></div>
                      <div class="rect3"></div>
                      <div class="rect4"></div>
                      <div class="rect5"></div>
                      </div>',
    );



    return $form;
}
